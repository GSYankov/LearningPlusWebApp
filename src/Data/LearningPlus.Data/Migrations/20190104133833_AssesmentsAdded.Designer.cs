// <auto-generated />
using System;
using LearningPlus.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LearningPlus.Web.Migrations
{
    [DbContext(typeof(LearningPlusDbContext))]
    [Migration("20190104133833_AssesmentsAdded")]
    partial class AssesmentsAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LearningPlus.Models.LearningPlusAssesment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChildId")
                        .IsRequired();

                    b.Property<Guid>("CourseId");

                    b.Property<DateTime>("Date");

                    b.Property<double>("Mark");

                    b.Property<string>("Notes")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("CourseId");

                    b.ToTable("Assesments");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message");

                    b.Property<string>("SenderId");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatRepository");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("DayOfWeek");

                    b.Property<int>("Discipline");

                    b.Property<int>("Room");

                    b.Property<string>("TeacherId");

                    b.Property<int>("TimeOfDay");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusClassesStudents", b =>
                {
                    b.Property<Guid>("ClassId");

                    b.Property<string>("StudentId");

                    b.HasKey("ClassId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("ClassesStudents");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusHomeWork", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlobLink");

                    b.Property<Guid?>("CourseId");

                    b.Property<string>("Resolutions");

                    b.Property<string>("StudentId");

                    b.Property<DateTime>("UploadedOn");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("HomeWorks");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusNews", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("CreatorId");

                    b.Property<DateTime>("ExpiresOn");

                    b.Property<string>("Message");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusNewsTargetRole", b =>
                {
                    b.Property<Guid>("NewsId");

                    b.Property<int>("TargetRole");

                    b.HasKey("NewsId", "TargetRole");

                    b.ToTable("NewsTargetRole");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("LearningPlusUserId");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LearningPlusUserId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusAssesment", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusUser", "Child")
                        .WithMany("Assesments")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LearningPlus.Models.LearningPlusClass", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusChat", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusUser", "Sender")
                        .WithMany("ChatPosts")
                        .HasForeignKey("SenderId");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusClass", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusUser", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusClassesStudents", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusClass", "Class")
                        .WithMany("StudentsEnrolled")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LearningPlus.Models.LearningPlusUser", "Student")
                        .WithMany("ClassesEnrolled")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusHomeWork", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusClass", "Course")
                        .WithMany("Homeworks")
                        .HasForeignKey("CourseId");

                    b.HasOne("LearningPlus.Models.LearningPlusUser", "Student")
                        .WithMany("SubmittedHomeworks")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusNews", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusNewsTargetRole", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusNews", "News")
                        .WithMany("TargetRoles")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LearningPlus.Models.LearningPlusUser", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusUser")
                        .WithMany("Children")
                        .HasForeignKey("LearningPlusUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LearningPlus.Models.LearningPlusUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LearningPlus.Models.LearningPlusUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
